/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.oauth.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the OAuthApplications_Users service. Represents a row in the &quot;OAuth_OAuthApplications_Users&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.portal.oauth.model.impl.OAuthApplications_UsersModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.portal.oauth.model.impl.OAuthApplications_UsersImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OAuthApplications_Users
 * @see com.liferay.portal.oauth.model.impl.OAuthApplications_UsersImpl
 * @see com.liferay.portal.oauth.model.impl.OAuthApplications_UsersModelImpl
 * @generated
 */
public interface OAuthApplications_UsersModel extends BaseModel<OAuthApplications_Users> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a o auth applications_ users model instance should use the {@link OAuthApplications_Users} interface instead.
	 */

	/**
	 * Returns the primary key of this o auth applications_ users.
	 *
	 * @return the primary key of this o auth applications_ users
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this o auth applications_ users.
	 *
	 * @param primaryKey the primary key of this o auth applications_ users
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the oaauid of this o auth applications_ users.
	 *
	 * @return the oaauid of this o auth applications_ users
	 */
	public long getOaauid();

	/**
	 * Sets the oaauid of this o auth applications_ users.
	 *
	 * @param oaauid the oaauid of this o auth applications_ users
	 */
	public void setOaauid(long oaauid);

	/**
	 * Returns the access token of this o auth applications_ users.
	 *
	 * @return the access token of this o auth applications_ users
	 */
	@AutoEscape
	public String getAccessToken();

	/**
	 * Sets the access token of this o auth applications_ users.
	 *
	 * @param accessToken the access token of this o auth applications_ users
	 */
	public void setAccessToken(String accessToken);

	/**
	 * Returns the access secret of this o auth applications_ users.
	 *
	 * @return the access secret of this o auth applications_ users
	 */
	@AutoEscape
	public String getAccessSecret();

	/**
	 * Sets the access secret of this o auth applications_ users.
	 *
	 * @param accessSecret the access secret of this o auth applications_ users
	 */
	public void setAccessSecret(String accessSecret);

	/**
	 * Returns the application ID of this o auth applications_ users.
	 *
	 * @return the application ID of this o auth applications_ users
	 */
	public long getApplicationId();

	/**
	 * Sets the application ID of this o auth applications_ users.
	 *
	 * @param applicationId the application ID of this o auth applications_ users
	 */
	public void setApplicationId(long applicationId);

	/**
	 * Returns the authorized of this o auth applications_ users.
	 *
	 * @return the authorized of this o auth applications_ users
	 */
	public boolean getAuthorized();

	/**
	 * Returns <code>true</code> if this o auth applications_ users is authorized.
	 *
	 * @return <code>true</code> if this o auth applications_ users is authorized; <code>false</code> otherwise
	 */
	public boolean isAuthorized();

	/**
	 * Sets whether this o auth applications_ users is authorized.
	 *
	 * @param authorized the authorized of this o auth applications_ users
	 */
	public void setAuthorized(boolean authorized);

	/**
	 * Returns the user ID of this o auth applications_ users.
	 *
	 * @return the user ID of this o auth applications_ users
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this o auth applications_ users.
	 *
	 * @param userId the user ID of this o auth applications_ users
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this o auth applications_ users.
	 *
	 * @return the user uuid of this o auth applications_ users
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this o auth applications_ users.
	 *
	 * @param userUuid the user uuid of this o auth applications_ users
	 */
	public void setUserUuid(String userUuid);

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public Serializable getPrimaryKeyObj();

	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(OAuthApplications_Users oAuthApplications_Users);

	public int hashCode();

	public CacheModel<OAuthApplications_Users> toCacheModel();

	public OAuthApplications_Users toEscapedModel();

	public String toString();

	public String toXmlString();
}