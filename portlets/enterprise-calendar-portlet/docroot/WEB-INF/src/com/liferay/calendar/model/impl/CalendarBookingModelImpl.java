/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.calendar.model.impl;

import com.liferay.calendar.model.CalendarBooking;
import com.liferay.calendar.model.CalendarBookingModel;
import com.liferay.calendar.model.CalendarBookingSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;

/**
 * The base model implementation for the CalendarBooking service. Represents a row in the &quot;CalendarBooking&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.calendar.model.CalendarBookingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CalendarBookingImpl}.
 * </p>
 *
 * @author Eduardo Lundgren
 * @see CalendarBookingImpl
 * @see com.liferay.calendar.model.CalendarBooking
 * @see com.liferay.calendar.model.CalendarBookingModel
 * @generated
 */
@JSON(strict = true)
public class CalendarBookingModelImpl extends BaseModelImpl<CalendarBooking>
	implements CalendarBookingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a calendar booking model instance should use the {@link com.liferay.calendar.model.CalendarBooking} interface instead.
	 */
	public static final String TABLE_NAME = "CalendarBooking";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "calendarBookingId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "calendarId", Types.BIGINT },
			{ "calendarResourceId", Types.BIGINT },
			{ "parentCalendarBookingId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "location", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "allDay", Types.BOOLEAN },
			{ "recurrence", Types.VARCHAR },
			{ "priority", Types.INTEGER },
			{ "outOfOffice", Types.BOOLEAN },
			{ "firstReminder", Types.INTEGER },
			{ "secondReminder", Types.INTEGER },
			{ "required", Types.BOOLEAN },
			{ "requestMessage", Types.VARCHAR },
			{ "responseMessage", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CalendarBooking (uuid_ VARCHAR(75) null,calendarBookingId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,calendarId LONG,calendarResourceId LONG,parentCalendarBookingId LONG,title STRING null,description STRING null,location STRING null,type_ VARCHAR(75) null,startDate DATE null,endDate DATE null,allDay BOOLEAN,recurrence VARCHAR(75) null,priority INTEGER,outOfOffice BOOLEAN,firstReminder INTEGER,secondReminder INTEGER,required BOOLEAN,requestMessage VARCHAR(75) null,responseMessage VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CalendarBooking";
	public static final String ORDER_BY_JPQL = " ORDER BY calendarBooking.startDate ASC, calendarBooking.title ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CalendarBooking.startDate ASC, CalendarBooking.title ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.calendar.model.CalendarBooking"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.calendar.model.CalendarBooking"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.calendar.model.CalendarBooking"),
			true);
	public static long CALENDARID_COLUMN_BITMASK = 1L;
	public static long CALENDARRESOURCEID_COLUMN_BITMASK = 2L;
	public static long ENDDATE_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;
	public static long STARTDATE_COLUMN_BITMASK = 16L;
	public static long STATUS_COLUMN_BITMASK = 32L;
	public static long UUID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CalendarBooking toModel(CalendarBookingSoap soapModel) {
		CalendarBooking model = new CalendarBookingImpl();

		model.setUuid(soapModel.getUuid());
		model.setCalendarBookingId(soapModel.getCalendarBookingId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCalendarId(soapModel.getCalendarId());
		model.setCalendarResourceId(soapModel.getCalendarResourceId());
		model.setParentCalendarBookingId(soapModel.getParentCalendarBookingId());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setLocation(soapModel.getLocation());
		model.setType(soapModel.getType());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setAllDay(soapModel.getAllDay());
		model.setRecurrence(soapModel.getRecurrence());
		model.setPriority(soapModel.getPriority());
		model.setOutOfOffice(soapModel.getOutOfOffice());
		model.setFirstReminder(soapModel.getFirstReminder());
		model.setSecondReminder(soapModel.getSecondReminder());
		model.setRequired(soapModel.getRequired());
		model.setRequestMessage(soapModel.getRequestMessage());
		model.setResponseMessage(soapModel.getResponseMessage());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CalendarBooking> toModels(
		CalendarBookingSoap[] soapModels) {
		List<CalendarBooking> models = new ArrayList<CalendarBooking>(soapModels.length);

		for (CalendarBookingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.calendar.model.CalendarBooking"));

	public CalendarBookingModelImpl() {
	}

	public long getPrimaryKey() {
		return _calendarBookingId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCalendarBookingId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_calendarBookingId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return CalendarBooking.class;
	}

	public String getModelClassName() {
		return CalendarBooking.class.getName();
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getCalendarBookingId() {
		return _calendarBookingId;
	}

	public void setCalendarBookingId(long calendarBookingId) {
		_calendarBookingId = calendarBookingId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getCalendarId() {
		return _calendarId;
	}

	public void setCalendarId(long calendarId) {
		_columnBitmask |= CALENDARID_COLUMN_BITMASK;

		if (!_setOriginalCalendarId) {
			_setOriginalCalendarId = true;

			_originalCalendarId = _calendarId;
		}

		_calendarId = calendarId;
	}

	public long getOriginalCalendarId() {
		return _originalCalendarId;
	}

	@JSON
	public long getCalendarResourceId() {
		return _calendarResourceId;
	}

	public void setCalendarResourceId(long calendarResourceId) {
		_columnBitmask |= CALENDARRESOURCEID_COLUMN_BITMASK;

		if (!_setOriginalCalendarResourceId) {
			_setOriginalCalendarResourceId = true;

			_originalCalendarResourceId = _calendarResourceId;
		}

		_calendarResourceId = calendarResourceId;
	}

	public long getOriginalCalendarResourceId() {
		return _originalCalendarResourceId;
	}

	@JSON
	public long getParentCalendarBookingId() {
		return _parentCalendarBookingId;
	}

	public void setParentCalendarBookingId(long parentCalendarBookingId) {
		_parentCalendarBookingId = parentCalendarBookingId;
	}

	@JSON
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	public void setTitle(String title) {
		_columnBitmask = -1L;

		_title = title;
	}

	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalizationXmlFromMap(titleMap,
				getTitle(), "Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	public void setDescription(String description) {
		_description = description;
	}

	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalizationXmlFromMap(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	public String getLocation(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLocation(languageId);
	}

	public String getLocation(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLocation(languageId, useDefault);
	}

	public String getLocation(String languageId) {
		return LocalizationUtil.getLocalization(getLocation(), languageId);
	}

	public String getLocation(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getLocation(), languageId,
			useDefault);
	}

	public String getLocationCurrentLanguageId() {
		return _locationCurrentLanguageId;
	}

	@JSON
	public String getLocationCurrentValue() {
		Locale locale = getLocale(_locationCurrentLanguageId);

		return getLocation(locale);
	}

	public Map<Locale, String> getLocationMap() {
		return LocalizationUtil.getLocalizationMap(getLocation());
	}

	public void setLocation(String location) {
		_location = location;
	}

	public void setLocation(String location, Locale locale) {
		setLocation(location, locale, LocaleUtil.getDefault());
	}

	public void setLocation(String location, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(location)) {
			setLocation(LocalizationUtil.updateLocalization(getLocation(),
					"Location", location, languageId, defaultLanguageId));
		}
		else {
			setLocation(LocalizationUtil.removeLocalization(getLocation(),
					"Location", languageId));
		}
	}

	public void setLocationCurrentLanguageId(String languageId) {
		_locationCurrentLanguageId = languageId;
	}

	public void setLocationMap(Map<Locale, String> locationMap) {
		setLocationMap(locationMap, LocaleUtil.getDefault());
	}

	public void setLocationMap(Map<Locale, String> locationMap,
		Locale defaultLocale) {
		if (locationMap == null) {
			return;
		}

		setLocation(LocalizationUtil.updateLocalizationXmlFromMap(locationMap,
				getLocation(), "Location",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	public void setType(String type) {
		_type = type;
	}

	@JSON
	public Date getStartDate() {
		return _startDate;
	}

	public void setStartDate(Date startDate) {
		_columnBitmask = -1L;

		if (_originalStartDate == null) {
			_originalStartDate = _startDate;
		}

		_startDate = startDate;
	}

	public Date getOriginalStartDate() {
		return _originalStartDate;
	}

	@JSON
	public Date getEndDate() {
		return _endDate;
	}

	public void setEndDate(Date endDate) {
		_columnBitmask |= ENDDATE_COLUMN_BITMASK;

		if (_originalEndDate == null) {
			_originalEndDate = _endDate;
		}

		_endDate = endDate;
	}

	public Date getOriginalEndDate() {
		return _originalEndDate;
	}

	@JSON
	public boolean getAllDay() {
		return _allDay;
	}

	public boolean isAllDay() {
		return _allDay;
	}

	public void setAllDay(boolean allDay) {
		_allDay = allDay;
	}

	@JSON
	public String getRecurrence() {
		if (_recurrence == null) {
			return StringPool.BLANK;
		}
		else {
			return _recurrence;
		}
	}

	public void setRecurrence(String recurrence) {
		_recurrence = recurrence;
	}

	@JSON
	public int getPriority() {
		return _priority;
	}

	public void setPriority(int priority) {
		_priority = priority;
	}

	@JSON
	public boolean getOutOfOffice() {
		return _outOfOffice;
	}

	public boolean isOutOfOffice() {
		return _outOfOffice;
	}

	public void setOutOfOffice(boolean outOfOffice) {
		_outOfOffice = outOfOffice;
	}

	@JSON
	public int getFirstReminder() {
		return _firstReminder;
	}

	public void setFirstReminder(int firstReminder) {
		_firstReminder = firstReminder;
	}

	@JSON
	public int getSecondReminder() {
		return _secondReminder;
	}

	public void setSecondReminder(int secondReminder) {
		_secondReminder = secondReminder;
	}

	@JSON
	public boolean getRequired() {
		return _required;
	}

	public boolean isRequired() {
		return _required;
	}

	public void setRequired(boolean required) {
		_required = required;
	}

	@JSON
	public String getRequestMessage() {
		if (_requestMessage == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestMessage;
		}
	}

	public void setRequestMessage(String requestMessage) {
		_requestMessage = requestMessage;
	}

	@JSON
	public String getResponseMessage() {
		if (_responseMessage == null) {
			return StringPool.BLANK;
		}
		else {
			return _responseMessage;
		}
	}

	public void setResponseMessage(String responseMessage) {
		_responseMessage = responseMessage;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@JSON
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	public Date getStatusDate() {
		return _statusDate;
	}

	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	/**
	 * @deprecated {@link #isApproved}
	 */
	public boolean getApproved() {
		return isApproved();
	}

	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isDraft() {
		if ((getStatus() == WorkflowConstants.STATUS_DRAFT) ||
				(getStatus() == WorkflowConstants.STATUS_DRAFT_FROM_APPROVED)) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public CalendarBooking toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (CalendarBooking)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					CalendarBooking.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		CalendarBookingImpl calendarBookingImpl = new CalendarBookingImpl();

		calendarBookingImpl.setUuid(getUuid());
		calendarBookingImpl.setCalendarBookingId(getCalendarBookingId());
		calendarBookingImpl.setGroupId(getGroupId());
		calendarBookingImpl.setCompanyId(getCompanyId());
		calendarBookingImpl.setUserId(getUserId());
		calendarBookingImpl.setUserName(getUserName());
		calendarBookingImpl.setCreateDate(getCreateDate());
		calendarBookingImpl.setModifiedDate(getModifiedDate());
		calendarBookingImpl.setCalendarId(getCalendarId());
		calendarBookingImpl.setCalendarResourceId(getCalendarResourceId());
		calendarBookingImpl.setParentCalendarBookingId(getParentCalendarBookingId());
		calendarBookingImpl.setTitle(getTitle());
		calendarBookingImpl.setDescription(getDescription());
		calendarBookingImpl.setLocation(getLocation());
		calendarBookingImpl.setType(getType());
		calendarBookingImpl.setStartDate(getStartDate());
		calendarBookingImpl.setEndDate(getEndDate());
		calendarBookingImpl.setAllDay(getAllDay());
		calendarBookingImpl.setRecurrence(getRecurrence());
		calendarBookingImpl.setPriority(getPriority());
		calendarBookingImpl.setOutOfOffice(getOutOfOffice());
		calendarBookingImpl.setFirstReminder(getFirstReminder());
		calendarBookingImpl.setSecondReminder(getSecondReminder());
		calendarBookingImpl.setRequired(getRequired());
		calendarBookingImpl.setRequestMessage(getRequestMessage());
		calendarBookingImpl.setResponseMessage(getResponseMessage());
		calendarBookingImpl.setStatus(getStatus());
		calendarBookingImpl.setStatusByUserId(getStatusByUserId());
		calendarBookingImpl.setStatusByUserName(getStatusByUserName());
		calendarBookingImpl.setStatusDate(getStatusDate());

		calendarBookingImpl.resetOriginalValues();

		return calendarBookingImpl;
	}

	public int compareTo(CalendarBooking calendarBooking) {
		int value = 0;

		value = DateUtil.compareTo(getStartDate(),
				calendarBooking.getStartDate());

		if (value != 0) {
			return value;
		}

		value = getTitle().toLowerCase()
					.compareTo(calendarBooking.getTitle().toLowerCase());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		CalendarBooking calendarBooking = null;

		try {
			calendarBooking = (CalendarBooking)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = calendarBooking.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CalendarBookingModelImpl calendarBookingModelImpl = this;

		calendarBookingModelImpl._originalUuid = calendarBookingModelImpl._uuid;

		calendarBookingModelImpl._originalGroupId = calendarBookingModelImpl._groupId;

		calendarBookingModelImpl._setOriginalGroupId = false;

		calendarBookingModelImpl._originalCalendarId = calendarBookingModelImpl._calendarId;

		calendarBookingModelImpl._setOriginalCalendarId = false;

		calendarBookingModelImpl._originalCalendarResourceId = calendarBookingModelImpl._calendarResourceId;

		calendarBookingModelImpl._setOriginalCalendarResourceId = false;

		calendarBookingModelImpl._originalStartDate = calendarBookingModelImpl._startDate;

		calendarBookingModelImpl._originalEndDate = calendarBookingModelImpl._endDate;

		calendarBookingModelImpl._originalStatus = calendarBookingModelImpl._status;

		calendarBookingModelImpl._setOriginalStatus = false;

		calendarBookingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CalendarBooking> toCacheModel() {
		CalendarBookingCacheModel calendarBookingCacheModel = new CalendarBookingCacheModel();

		calendarBookingCacheModel.uuid = getUuid();

		String uuid = calendarBookingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			calendarBookingCacheModel.uuid = null;
		}

		calendarBookingCacheModel.calendarBookingId = getCalendarBookingId();

		calendarBookingCacheModel.groupId = getGroupId();

		calendarBookingCacheModel.companyId = getCompanyId();

		calendarBookingCacheModel.userId = getUserId();

		calendarBookingCacheModel.userName = getUserName();

		String userName = calendarBookingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			calendarBookingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			calendarBookingCacheModel.createDate = createDate.getTime();
		}
		else {
			calendarBookingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			calendarBookingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			calendarBookingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		calendarBookingCacheModel.calendarId = getCalendarId();

		calendarBookingCacheModel.calendarResourceId = getCalendarResourceId();

		calendarBookingCacheModel.parentCalendarBookingId = getParentCalendarBookingId();

		calendarBookingCacheModel.title = getTitle();

		String title = calendarBookingCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			calendarBookingCacheModel.title = null;
		}

		calendarBookingCacheModel.description = getDescription();

		String description = calendarBookingCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			calendarBookingCacheModel.description = null;
		}

		calendarBookingCacheModel.location = getLocation();

		String location = calendarBookingCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			calendarBookingCacheModel.location = null;
		}

		calendarBookingCacheModel.type = getType();

		String type = calendarBookingCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			calendarBookingCacheModel.type = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			calendarBookingCacheModel.startDate = startDate.getTime();
		}
		else {
			calendarBookingCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			calendarBookingCacheModel.endDate = endDate.getTime();
		}
		else {
			calendarBookingCacheModel.endDate = Long.MIN_VALUE;
		}

		calendarBookingCacheModel.allDay = getAllDay();

		calendarBookingCacheModel.recurrence = getRecurrence();

		String recurrence = calendarBookingCacheModel.recurrence;

		if ((recurrence != null) && (recurrence.length() == 0)) {
			calendarBookingCacheModel.recurrence = null;
		}

		calendarBookingCacheModel.priority = getPriority();

		calendarBookingCacheModel.outOfOffice = getOutOfOffice();

		calendarBookingCacheModel.firstReminder = getFirstReminder();

		calendarBookingCacheModel.secondReminder = getSecondReminder();

		calendarBookingCacheModel.required = getRequired();

		calendarBookingCacheModel.requestMessage = getRequestMessage();

		String requestMessage = calendarBookingCacheModel.requestMessage;

		if ((requestMessage != null) && (requestMessage.length() == 0)) {
			calendarBookingCacheModel.requestMessage = null;
		}

		calendarBookingCacheModel.responseMessage = getResponseMessage();

		String responseMessage = calendarBookingCacheModel.responseMessage;

		if ((responseMessage != null) && (responseMessage.length() == 0)) {
			calendarBookingCacheModel.responseMessage = null;
		}

		calendarBookingCacheModel.status = getStatus();

		calendarBookingCacheModel.statusByUserId = getStatusByUserId();

		calendarBookingCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = calendarBookingCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			calendarBookingCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			calendarBookingCacheModel.statusDate = statusDate.getTime();
		}
		else {
			calendarBookingCacheModel.statusDate = Long.MIN_VALUE;
		}

		return calendarBookingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(61);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", calendarBookingId=");
		sb.append(getCalendarBookingId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", calendarId=");
		sb.append(getCalendarId());
		sb.append(", calendarResourceId=");
		sb.append(getCalendarResourceId());
		sb.append(", parentCalendarBookingId=");
		sb.append(getParentCalendarBookingId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", allDay=");
		sb.append(getAllDay());
		sb.append(", recurrence=");
		sb.append(getRecurrence());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", outOfOffice=");
		sb.append(getOutOfOffice());
		sb.append(", firstReminder=");
		sb.append(getFirstReminder());
		sb.append(", secondReminder=");
		sb.append(getSecondReminder());
		sb.append(", required=");
		sb.append(getRequired());
		sb.append(", requestMessage=");
		sb.append(getRequestMessage());
		sb.append(", responseMessage=");
		sb.append(getResponseMessage());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(94);

		sb.append("<model><model-name>");
		sb.append("com.liferay.calendar.model.CalendarBooking");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calendarBookingId</column-name><column-value><![CDATA[");
		sb.append(getCalendarBookingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calendarId</column-name><column-value><![CDATA[");
		sb.append(getCalendarId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calendarResourceId</column-name><column-value><![CDATA[");
		sb.append(getCalendarResourceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentCalendarBookingId</column-name><column-value><![CDATA[");
		sb.append(getParentCalendarBookingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allDay</column-name><column-value><![CDATA[");
		sb.append(getAllDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recurrence</column-name><column-value><![CDATA[");
		sb.append(getRecurrence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>outOfOffice</column-name><column-value><![CDATA[");
		sb.append(getOutOfOffice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstReminder</column-name><column-value><![CDATA[");
		sb.append(getFirstReminder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secondReminder</column-name><column-value><![CDATA[");
		sb.append(getSecondReminder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>required</column-name><column-value><![CDATA[");
		sb.append(getRequired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestMessage</column-name><column-value><![CDATA[");
		sb.append(getRequestMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>responseMessage</column-name><column-value><![CDATA[");
		sb.append(getResponseMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CalendarBooking.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			CalendarBooking.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _calendarBookingId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _calendarId;
	private long _originalCalendarId;
	private boolean _setOriginalCalendarId;
	private long _calendarResourceId;
	private long _originalCalendarResourceId;
	private boolean _setOriginalCalendarResourceId;
	private long _parentCalendarBookingId;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _location;
	private String _locationCurrentLanguageId;
	private String _type;
	private Date _startDate;
	private Date _originalStartDate;
	private Date _endDate;
	private Date _originalEndDate;
	private boolean _allDay;
	private String _recurrence;
	private int _priority;
	private boolean _outOfOffice;
	private int _firstReminder;
	private int _secondReminder;
	private boolean _required;
	private String _requestMessage;
	private String _responseMessage;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private CalendarBooking _escapedModelProxy;
}