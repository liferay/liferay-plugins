/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sharing.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.liferay.sharing.model.SharingEntry;
import com.liferay.sharing.model.SharingEntryModel;
import com.liferay.sharing.model.SharingEntrySoap;
import com.liferay.sharing.service.persistence.SharingEntryPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SharingEntry service. Represents a row in the &quot;Sharing_SharingEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sharing.model.SharingEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SharingEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SharingEntryImpl
 * @see com.liferay.sharing.model.SharingEntry
 * @see com.liferay.sharing.model.SharingEntryModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SharingEntryModelImpl extends BaseModelImpl<SharingEntry>
	implements SharingEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sharing entry model instance should use the {@link com.liferay.sharing.model.SharingEntry} interface instead.
	 */
	public static final String TABLE_NAME = "Sharing_SharingEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "sharingClassNameId", Types.BIGINT },
			{ "sharingClassPK", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Sharing_SharingEntry (classNameId LONG not null,classPK LONG not null,sharingClassNameId LONG not null,sharingClassPK LONG not null,primary key (classNameId, classPK, sharingClassNameId, sharingClassPK))";
	public static final String TABLE_SQL_DROP = "drop table Sharing_SharingEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY sharingEntry.id.classNameId ASC, sharingEntry.id.classPK ASC, sharingEntry.id.sharingClassNameId ASC, sharingEntry.id.sharingClassPK ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Sharing_SharingEntry.classNameId ASC, Sharing_SharingEntry.classPK ASC, Sharing_SharingEntry.sharingClassNameId ASC, Sharing_SharingEntry.sharingClassPK ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sharing.model.SharingEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sharing.model.SharingEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.sharing.model.SharingEntry"),
			true);
	public static final long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static final long CLASSPK_COLUMN_BITMASK = 2L;
	public static final long SHARINGCLASSNAMEID_COLUMN_BITMASK = 4L;
	public static final long SHARINGCLASSPK_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SharingEntry toModel(SharingEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SharingEntry model = new SharingEntryImpl();

		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());
		model.setSharingClassNameId(soapModel.getSharingClassNameId());
		model.setSharingClassPK(soapModel.getSharingClassPK());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SharingEntry> toModels(SharingEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SharingEntry> models = new ArrayList<SharingEntry>(soapModels.length);

		for (SharingEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sharing.model.SharingEntry"));

	public SharingEntryModelImpl() {
	}

	@Override
	public SharingEntryPK getPrimaryKey() {
		return new SharingEntryPK(_classNameId, _classPK, _sharingClassNameId,
			_sharingClassPK);
	}

	@Override
	public void setPrimaryKey(SharingEntryPK primaryKey) {
		setClassNameId(primaryKey.classNameId);
		setClassPK(primaryKey.classPK);
		setSharingClassNameId(primaryKey.sharingClassNameId);
		setSharingClassPK(primaryKey.sharingClassPK);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new SharingEntryPK(_classNameId, _classPK, _sharingClassNameId,
			_sharingClassPK);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((SharingEntryPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return SharingEntry.class;
	}

	@Override
	public String getModelClassName() {
		return SharingEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("sharingClassNameId", getSharingClassNameId());
		attributes.put("sharingClassPK", getSharingClassPK());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		Long sharingClassNameId = (Long)attributes.get("sharingClassNameId");

		if (sharingClassNameId != null) {
			setSharingClassNameId(sharingClassNameId);
		}

		Long sharingClassPK = (Long)attributes.get("sharingClassPK");

		if (sharingClassPK != null) {
			setSharingClassPK(sharingClassPK);
		}
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@JSON
	@Override
	public long getSharingClassNameId() {
		return _sharingClassNameId;
	}

	@Override
	public void setSharingClassNameId(long sharingClassNameId) {
		_columnBitmask |= SHARINGCLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalSharingClassNameId) {
			_setOriginalSharingClassNameId = true;

			_originalSharingClassNameId = _sharingClassNameId;
		}

		_sharingClassNameId = sharingClassNameId;
	}

	public long getOriginalSharingClassNameId() {
		return _originalSharingClassNameId;
	}

	@JSON
	@Override
	public long getSharingClassPK() {
		return _sharingClassPK;
	}

	@Override
	public void setSharingClassPK(long sharingClassPK) {
		_columnBitmask |= SHARINGCLASSPK_COLUMN_BITMASK;

		if (!_setOriginalSharingClassPK) {
			_setOriginalSharingClassPK = true;

			_originalSharingClassPK = _sharingClassPK;
		}

		_sharingClassPK = sharingClassPK;
	}

	public long getOriginalSharingClassPK() {
		return _originalSharingClassPK;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public SharingEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SharingEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SharingEntryImpl sharingEntryImpl = new SharingEntryImpl();

		sharingEntryImpl.setClassNameId(getClassNameId());
		sharingEntryImpl.setClassPK(getClassPK());
		sharingEntryImpl.setSharingClassNameId(getSharingClassNameId());
		sharingEntryImpl.setSharingClassPK(getSharingClassPK());

		sharingEntryImpl.resetOriginalValues();

		return sharingEntryImpl;
	}

	@Override
	public int compareTo(SharingEntry sharingEntry) {
		SharingEntryPK primaryKey = sharingEntry.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SharingEntry)) {
			return false;
		}

		SharingEntry sharingEntry = (SharingEntry)obj;

		SharingEntryPK primaryKey = sharingEntry.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SharingEntryModelImpl sharingEntryModelImpl = this;

		sharingEntryModelImpl._originalClassNameId = sharingEntryModelImpl._classNameId;

		sharingEntryModelImpl._setOriginalClassNameId = false;

		sharingEntryModelImpl._originalClassPK = sharingEntryModelImpl._classPK;

		sharingEntryModelImpl._setOriginalClassPK = false;

		sharingEntryModelImpl._originalSharingClassNameId = sharingEntryModelImpl._sharingClassNameId;

		sharingEntryModelImpl._setOriginalSharingClassNameId = false;

		sharingEntryModelImpl._originalSharingClassPK = sharingEntryModelImpl._sharingClassPK;

		sharingEntryModelImpl._setOriginalSharingClassPK = false;

		sharingEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SharingEntry> toCacheModel() {
		SharingEntryCacheModel sharingEntryCacheModel = new SharingEntryCacheModel();

		sharingEntryCacheModel.classNameId = getClassNameId();

		sharingEntryCacheModel.classPK = getClassPK();

		sharingEntryCacheModel.sharingClassNameId = getSharingClassNameId();

		sharingEntryCacheModel.sharingClassPK = getSharingClassPK();

		return sharingEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", sharingClassNameId=");
		sb.append(getSharingClassNameId());
		sb.append(", sharingClassPK=");
		sb.append(getSharingClassPK());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sharing.model.SharingEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharingClassNameId</column-name><column-value><![CDATA[");
		sb.append(getSharingClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sharingClassPK</column-name><column-value><![CDATA[");
		sb.append(getSharingClassPK());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SharingEntry.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SharingEntry.class
		};
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _sharingClassNameId;
	private long _originalSharingClassNameId;
	private boolean _setOriginalSharingClassNameId;
	private long _sharingClassPK;
	private long _originalSharingClassPK;
	private boolean _setOriginalSharingClassPK;
	private long _columnBitmask;
	private SharingEntry _escapedModel;
}