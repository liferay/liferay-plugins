/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.share.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBFactoryUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.ClassNamePersistence;
import com.liferay.portal.service.persistence.UserPersistence;
import com.liferay.portal.util.PortalUtil;

import com.liferay.share.model.EntitySocialFeed;
import com.liferay.share.service.EntitySocialFeedLocalService;
import com.liferay.share.service.persistence.EntitySocialFeedPK;
import com.liferay.share.service.persistence.EntitySocialFeedPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the entity social feed local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.share.service.impl.EntitySocialFeedLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.share.service.impl.EntitySocialFeedLocalServiceImpl
 * @see com.liferay.share.service.EntitySocialFeedLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class EntitySocialFeedLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements EntitySocialFeedLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.share.service.EntitySocialFeedLocalServiceUtil} to access the entity social feed local service.
	 */

	/**
	 * Adds the entity social feed to the database. Also notifies the appropriate model listeners.
	 *
	 * @param entitySocialFeed the entity social feed
	 * @return the entity social feed that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EntitySocialFeed addEntitySocialFeed(
		EntitySocialFeed entitySocialFeed) {
		entitySocialFeed.setNew(true);

		return entitySocialFeedPersistence.update(entitySocialFeed);
	}

	/**
	 * Creates a new entity social feed with the primary key. Does not add the entity social feed to the database.
	 *
	 * @param entitySocialFeedPK the primary key for the new entity social feed
	 * @return the new entity social feed
	 */
	@Override
	public EntitySocialFeed createEntitySocialFeed(
		EntitySocialFeedPK entitySocialFeedPK) {
		return entitySocialFeedPersistence.create(entitySocialFeedPK);
	}

	/**
	 * Deletes the entity social feed with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param entitySocialFeedPK the primary key of the entity social feed
	 * @return the entity social feed that was removed
	 * @throws PortalException if a entity social feed with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EntitySocialFeed deleteEntitySocialFeed(
		EntitySocialFeedPK entitySocialFeedPK) throws PortalException {
		return entitySocialFeedPersistence.remove(entitySocialFeedPK);
	}

	/**
	 * Deletes the entity social feed from the database. Also notifies the appropriate model listeners.
	 *
	 * @param entitySocialFeed the entity social feed
	 * @return the entity social feed that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EntitySocialFeed deleteEntitySocialFeed(
		EntitySocialFeed entitySocialFeed) {
		return entitySocialFeedPersistence.remove(entitySocialFeed);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(EntitySocialFeed.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return entitySocialFeedPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.share.model.impl.EntitySocialFeedModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return entitySocialFeedPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.share.model.impl.EntitySocialFeedModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return entitySocialFeedPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return entitySocialFeedPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return entitySocialFeedPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public EntitySocialFeed fetchEntitySocialFeed(
		EntitySocialFeedPK entitySocialFeedPK) {
		return entitySocialFeedPersistence.fetchByPrimaryKey(entitySocialFeedPK);
	}

	/**
	 * Returns the entity social feed with the primary key.
	 *
	 * @param entitySocialFeedPK the primary key of the entity social feed
	 * @return the entity social feed
	 * @throws PortalException if a entity social feed with the primary key could not be found
	 */
	@Override
	public EntitySocialFeed getEntitySocialFeed(
		EntitySocialFeedPK entitySocialFeedPK) throws PortalException {
		return entitySocialFeedPersistence.findByPrimaryKey(entitySocialFeedPK);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(com.liferay.share.service.EntitySocialFeedLocalServiceUtil.getService());
		actionableDynamicQuery.setClass(EntitySocialFeed.class);
		actionableDynamicQuery.setClassLoader(getClassLoader());

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"primaryKey.classNameId");

		return actionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(com.liferay.share.service.EntitySocialFeedLocalServiceUtil.getService());
		actionableDynamicQuery.setClass(EntitySocialFeed.class);
		actionableDynamicQuery.setClassLoader(getClassLoader());

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"primaryKey.classNameId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return entitySocialFeedLocalService.deleteEntitySocialFeed((EntitySocialFeed)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return entitySocialFeedPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the entity social feeds.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.share.model.impl.EntitySocialFeedModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of entity social feeds
	 * @param end the upper bound of the range of entity social feeds (not inclusive)
	 * @return the range of entity social feeds
	 */
	@Override
	public List<EntitySocialFeed> getEntitySocialFeeds(int start, int end) {
		return entitySocialFeedPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of entity social feeds.
	 *
	 * @return the number of entity social feeds
	 */
	@Override
	public int getEntitySocialFeedsCount() {
		return entitySocialFeedPersistence.countAll();
	}

	/**
	 * Updates the entity social feed in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param entitySocialFeed the entity social feed
	 * @return the entity social feed that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EntitySocialFeed updateEntitySocialFeed(
		EntitySocialFeed entitySocialFeed) {
		return entitySocialFeedPersistence.update(entitySocialFeed);
	}

	/**
	 * Returns the entity social feed local service.
	 *
	 * @return the entity social feed local service
	 */
	public com.liferay.share.service.EntitySocialFeedLocalService getEntitySocialFeedLocalService() {
		return entitySocialFeedLocalService;
	}

	/**
	 * Sets the entity social feed local service.
	 *
	 * @param entitySocialFeedLocalService the entity social feed local service
	 */
	public void setEntitySocialFeedLocalService(
		com.liferay.share.service.EntitySocialFeedLocalService entitySocialFeedLocalService) {
		this.entitySocialFeedLocalService = entitySocialFeedLocalService;
	}

	/**
	 * Returns the entity social feed remote service.
	 *
	 * @return the entity social feed remote service
	 */
	public com.liferay.share.service.EntitySocialFeedService getEntitySocialFeedService() {
		return entitySocialFeedService;
	}

	/**
	 * Sets the entity social feed remote service.
	 *
	 * @param entitySocialFeedService the entity social feed remote service
	 */
	public void setEntitySocialFeedService(
		com.liferay.share.service.EntitySocialFeedService entitySocialFeedService) {
		this.entitySocialFeedService = entitySocialFeedService;
	}

	/**
	 * Returns the entity social feed persistence.
	 *
	 * @return the entity social feed persistence
	 */
	public EntitySocialFeedPersistence getEntitySocialFeedPersistence() {
		return entitySocialFeedPersistence;
	}

	/**
	 * Sets the entity social feed persistence.
	 *
	 * @param entitySocialFeedPersistence the entity social feed persistence
	 */
	public void setEntitySocialFeedPersistence(
		EntitySocialFeedPersistence entitySocialFeedPersistence) {
		this.entitySocialFeedPersistence = entitySocialFeedPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name remote service.
	 *
	 * @return the class name remote service
	 */
	public com.liferay.portal.service.ClassNameService getClassNameService() {
		return classNameService;
	}

	/**
	 * Sets the class name remote service.
	 *
	 * @param classNameService the class name remote service
	 */
	public void setClassNameService(
		com.liferay.portal.service.ClassNameService classNameService) {
		this.classNameService = classNameService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.share.model.EntitySocialFeed",
			entitySocialFeedLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.share.model.EntitySocialFeed");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return EntitySocialFeed.class;
	}

	protected String getModelClassName() {
		return EntitySocialFeed.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = entitySocialFeedPersistence.getDataSource();

			DB db = DBFactoryUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.share.service.EntitySocialFeedLocalService.class)
	protected com.liferay.share.service.EntitySocialFeedLocalService entitySocialFeedLocalService;
	@BeanReference(type = com.liferay.share.service.EntitySocialFeedService.class)
	protected com.liferay.share.service.EntitySocialFeedService entitySocialFeedService;
	@BeanReference(type = EntitySocialFeedPersistence.class)
	protected EntitySocialFeedPersistence entitySocialFeedPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ClassNameLocalService.class)
	protected com.liferay.portal.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = com.liferay.portal.service.ClassNameService.class)
	protected com.liferay.portal.service.ClassNameService classNameService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private EntitySocialFeedLocalServiceClpInvoker _clpInvoker = new EntitySocialFeedLocalServiceClpInvoker();
}