<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
int count = 0;
String exceptionDatesString = StringPool.BLANK;
Frequency frequency = null;
int interval = 0;
java.util.Calendar untilJCalendar = startTimeJCalendar;
List<Weekday> weekdays = new ArrayList<Weekday>();

boolean afterChecked = false;
boolean onChecked = false;

if (recurrence != null) {
	count = recurrence.getCount();
	frequency = recurrence.getFrequency();
	interval = recurrence.getInterval();

	if (recurrence.getUntilJCalendar() != null) {
		untilJCalendar = recurrence.getUntilJCalendar();
	}

	weekdays = recurrence.getWeekdays();

	if (count > 0) {
		afterChecked = true;
	}

	if (recurrence.getUntilJCalendar() != null) {
		onChecked = true;
	}

	StringBundler sb = new StringBundler();

	List<java.util.Calendar> exceptionJCalendars = recurrence.getExceptionJCalendars();

	Iterator<java.util.Calendar> iterator = exceptionJCalendars.iterator();

	while (iterator.hasNext()) {
		java.util.Calendar exceptionJCalendar = iterator.next();

		sb.append(exceptionJCalendar.getTimeInMillis());

		if (iterator.hasNext()) {
			sb.append(StringPool.COMMA);
		}
	}

	exceptionDatesString = sb.toString();
}
%>

<div class="calendar-portlet-recurrence-container hide">
	<table id="<portlet:namespace />recurrenceContainer">
		<aui:input disabled="<%= !reschedulable %>" name="exceptionDates" type="hidden" value="<%= exceptionDatesString %>" />

		<tbody>
			<tr>
				<th class="calendar-portlet-recurrence-title">
					<liferay-ui:message key="repeats" />:
				</th>
				<td class="calendar-portlet-recurrence-content">
					<aui:select disabled="<%= !reschedulable %>" label="" name="frequency">

						<%
						for (Frequency curFrequency : Frequency.values()) {
						%>

							<aui:option selected="<%= (frequency == curFrequency) %>" value="<%= curFrequency.getValue() %>"><%= LanguageUtil.get(locale, StringUtil.toLowerCase(curFrequency.getValue())) %></aui:option>

						<%
						}
						%>

					</aui:select>
				</td>
			</tr>
		</tbody>
		<tbody class="calendar-portlet-interval-view" id="<portlet:namespace />intervalContainer">
			<tr>
				<th class="calendar-portlet-recurrence-title">
					<liferay-ui:message key="repeat-every" />:
				</th>
				<td class="calendar-portlet-recurrence-content">
					<aui:select disabled="<%= !reschedulable %>" label="" name="interval">

						<%
						for (int i = 1; i <= 30; i++) {
						%>

							<aui:option selected="<%= (interval == i) %>" value="<%= i %>"><%= i %></aui:option>

						<%
						}
						%>

					</aui:select>

					<span id="<portlet:namespace />intervalLabel"></span>
				</td>
			</tr>
		</tbody>
		<tbody class="calendar-portlet-interval-view <%= (frequency == Frequency.WEEKLY) ? "" : "hide" %>" id="<portlet:namespace />view<%= Frequency.WEEKLY %>">
			<tr>
				<th class="calendar-portlet-recurrence-title">
					<liferay-ui:message key="repeat-on" />:
				</th>
				<td class="calendar-portlet-recurrence-content calendar-recurrence-weekday-checkbox">
					<aui:field-wrapper inlineField="<%= true %>" label="">

						<%
						for (Weekday weekday : Weekday.values()) {
						%>

							<aui:input checked="<%= weekdays.contains(weekday) %>" data-weekday='<%= LanguageUtil.get(pageContext, "weekday." + weekday.getValue()) %>' disabled="<%= !reschedulable %>" label="<%= weekday.getValue() %>" name="<%= weekday.getValue() %>" type="checkbox" />

						<%
						}
						%>

					</aui:field-wrapper>
				</td>
			</tr>
		</tbody>
		<tbody class="calendar-portlet-interval-view">
			<tr>
				<th class="calendar-portlet-recurrence-title">
					<liferay-ui:message key="ends" />:
				</th>
				<td class="calendar-portlet-recurrence-content">
					<aui:field-wrapper cssClass="calendar-portlet-recurrence-limit" label="">
						<aui:input checked="<%= !afterChecked && !onChecked %>" disabled="<%= !reschedulable %>" label="<%= StringPool.BLANK %>" name="ends" type="radio" value="never" />

						<label><liferay-ui:message key="never" /></label>
					</aui:field-wrapper>

					<aui:field-wrapper cssClass="calendar-portlet-recurrence-limit" label="">
						<aui:input checked="<%= afterChecked %>" disabled="<%= !reschedulable %>" label="<%= StringPool.BLANK %>" name="ends" type="radio" value="after" />

						<label><liferay-ui:message key="after" /></label>

						<aui:input disabled="<%= !afterChecked || !reschedulable %>" label="<%= StringPool.BLANK %>"  name="count" size="5" type="text" value="<%= afterChecked ? count : StringPool.BLANK %>" />

						<label><liferay-ui:message key="occurrences" /></label>
					</aui:field-wrapper>

					<aui:field-wrapper cssClass="calendar-portlet-recurrence-limit calendar-portlet-field-date" label="">
						<aui:input checked="<%= onChecked %>" disabled="<%= !reschedulable %>" label="<%= StringPool.BLANK %>" name="ends" type="radio" value="on" />

						<div class="calendar-portlet-field-datepicker clearfix">
							<label><liferay-ui:message key="on" /></label>

							<liferay-ui:input-date
								dayParam="untilDateDay"
								dayValue="<%= untilJCalendar.get(java.util.Calendar.DATE) %>"
								disabled="<%= !onChecked || !reschedulable %>"
								monthParam="untilDateMonth"
								monthValue="<%= untilJCalendar.get(java.util.Calendar.MONTH) %>"
								name="untilDate"
								yearParam="untilDateYear"
								yearValue="<%= untilJCalendar.get(java.util.Calendar.YEAR) %>"
							/>
						</div>
					</aui:field-wrapper>
				</td>
			</tr>
		</tbody>
		<tbody class="calendar-portlet-interval-view">
			<tr>
				<th class="calendar-portlet-recurrence-title">
					<liferay-ui:message key="summary" />:
				</th>
				<td class="calendar-portlet-recurrence-content">
					<span class="calendar-portlet-recurrence-summary" id="<portlet:namespace />summaryPreview">
						<liferay-ui:message key="none" />
					</span>
				</td>
			</tr>
		</tbody>
	</table>
</div>

<aui:script use="liferay-util-window">
	var countNode = A.one('#<portlet:namespace />count');
	var endsRadioNodes = A.all('[name=<portlet:namespace />ends]');
	var frequencyNode = A.one('#<portlet:namespace />frequency');
	var recurrenceContainerNode = A.one('#<portlet:namespace />recurrenceContainer');
	var repeatCheckboxNode = A.one('#<portlet:namespace />repeatCheckbox');
	var summaryNode = A.one('#<portlet:namespace />summary');

	var untilDateDatePicker = Liferay.component('<portlet:namespace />untilDateDatePicker');

	window.<portlet:namespace />recurrenceDialog;

	window.<portlet:namespace />openRecurrenceDialog = function(visible) {
		var instance = this;

		window.<portlet:namespace />recurrenceDialog = Liferay.Util.Window.getWindow(
			{
				dialog: {
					after:{
						visibleChange: function(event) {
							if (event.newVal) {
								recurrenceContainerNode.show();
							}

							window.<portlet:namespace />updateSummaries();
						}
					},
					bodyContent: recurrenceContainerNode,
					centered: true,
					height: 600,
					id: '<portlet:namespace />recurrenceDialog',
					modal: true,
					render: '#<portlet:namespace />fm',
					toolbars: {
						footer: [
							{
								on: {
									click: function() {
										window.<portlet:namespace />recurrenceDialog.hide();
									}
								},
								label: '<liferay-ui:message key='<%= reschedulable ? "done" : "close" %>' />'
							}
						]
					},
					visible: visible,
					width: 600
				},
				title: '<liferay-ui:message key="repeat" />'
			}
		);
	};

	var onInputChange = function(event) {
		var target = event.target;

		if (target.test('#<portlet:namespace />frequency')) {
			window.<portlet:namespace />toggleView('<%= Frequency.WEEKLY %>', (target.val() == '<%= Frequency.WEEKLY %>'));
		}

		var endValue = endsRadioNodes.filter(':checked').val()[0];

		if ((endValue == 'never') || (endValue == 'on')) {
			countNode.set('disabled', true);
		}
		else {
			countNode.set('disabled', false);
		}

		countNode.selectText();

		if ((endValue == 'never') || (endValue == 'after')) {
			untilDateDatePicker.set('disabled', true);
		}
		else {
			untilDateDatePicker.set('disabled', false);
		}

		window.<portlet:namespace />updateSummaries();
	};

	recurrenceContainerNode.delegate('change', onInputChange, 'select,input');
	recurrenceContainerNode.delegate('keypress', onInputChange, 'select');

	repeatCheckboxNode.on(
		'change',
		function(event) {
			var checked = event.currentTarget.get('checked');

			if (!checked) {
				summaryNode.empty();
			}

			<portlet:namespace />openRecurrenceDialog(checked);
		}
	);

	summaryNode.on(
		'click',
		function(event) {
			<portlet:namespace />openRecurrenceDialog(true);

			event.halt();
		}
	);

	untilDateDatePicker.after(
		'selectionChange',
		function(event) {
			window.<portlet:namespace />updateSummaries();
		}
	);

	window.<portlet:namespace />getSummary = function() {
		var intervalNode = A.one('#<portlet:namespace />interval');
		var weekdays = A.all('#<portlet:namespace />view<%= Frequency.WEEKLY %> input:checked');

		var selectedWeekdays = [];

		if (weekdays.size()) {
			selectedWeekdays = weekdays.getAttribute('data-weekday');
		}

		var endValue = endsRadioNodes.filter(':checked').val()[0];

		var recurrence = {
			count: countNode.val(),
			endValue: endValue,
			frequency: frequencyNode.val(),
			interval: intervalNode.val(),
			untilDate: untilDateDatePicker.getDate(),
			weekdays: selectedWeekdays
		}

		return Liferay.RecurrenceUtil.getSummary(recurrence);
	};

	window.<portlet:namespace />toggleView = function(viewName, show) {
		var viewNode = A.one('#<portlet:namespace />view' + viewName);

		if (viewNode) {
			viewNode.toggle(show);
		}
	};

	window.<portlet:namespace />updateSummary = function(element) {
		var previewNode = A.one(element);

		if (previewNode) {
			previewNode.html(window.<portlet:namespace />getSummary());
		}
	};

	window.<portlet:namespace />updateSummaries = function() {
		window.<portlet:namespace />updateSummary(summaryNode);
		window.<portlet:namespace />updateSummary('#<portlet:namespace />summaryPreview');
	}

	<c:if test="<%= recurring %>">
		window.<portlet:namespace />updateSummaries();
	</c:if>
</aui:script>