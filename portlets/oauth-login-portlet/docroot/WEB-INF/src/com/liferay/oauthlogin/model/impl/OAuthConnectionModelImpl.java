/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.oauthlogin.model.impl;

import com.liferay.oauthlogin.model.OAuthConnection;
import com.liferay.oauthlogin.model.OAuthConnectionModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OAuthConnection service. Represents a row in the &quot;OAuthLogin_OAuthConnection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.oauthlogin.model.OAuthConnectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OAuthConnectionImpl}.
 * </p>
 *
 * @author Andy Yang
 * @see OAuthConnectionImpl
 * @see com.liferay.oauthlogin.model.OAuthConnection
 * @see com.liferay.oauthlogin.model.OAuthConnectionModel
 * @generated
 */
public class OAuthConnectionModelImpl extends BaseModelImpl<OAuthConnection>
	implements OAuthConnectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a o auth connection model instance should use the {@link com.liferay.oauthlogin.model.OAuthConnection} interface instead.
	 */
	public static final String TABLE_NAME = "OAuthLogin_OAuthConnection";
	public static final Object[][] TABLE_COLUMNS = {
			{ "oAuthConnectionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "enabled", Types.BOOLEAN },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "iconId", Types.BIGINT },
			{ "oAuthVersion", Types.INTEGER },
			{ "key_", Types.VARCHAR },
			{ "secret", Types.VARCHAR },
			{ "scope", Types.VARCHAR },
			{ "authorizeURL", Types.VARCHAR },
			{ "accessTokenURL", Types.VARCHAR },
			{ "accessTokenVerb", Types.INTEGER },
			{ "accessTokenExtractorType", Types.INTEGER },
			{ "requestTokenURL", Types.VARCHAR },
			{ "requestTokenVerb", Types.INTEGER },
			{ "signatureServiceType", Types.INTEGER },
			{ "redirectURL", Types.VARCHAR },
			{ "socialAccountIdURL", Types.VARCHAR },
			{ "socialAccountIdURLVerb", Types.INTEGER },
			{ "socialAccountIdField", Types.VARCHAR },
			{ "socialAccountIdType", Types.INTEGER },
			{ "socialAccountIdScript", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table OAuthLogin_OAuthConnection (oAuthConnectionId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,enabled BOOLEAN,name VARCHAR(75) null,description VARCHAR(75) null,iconId LONG,oAuthVersion INTEGER,key_ VARCHAR(75) null,secret VARCHAR(75) null,scope VARCHAR(75) null,authorizeURL VARCHAR(75) null,accessTokenURL VARCHAR(75) null,accessTokenVerb INTEGER,accessTokenExtractorType INTEGER,requestTokenURL VARCHAR(75) null,requestTokenVerb INTEGER,signatureServiceType INTEGER,redirectURL VARCHAR(75) null,socialAccountIdURL VARCHAR(75) null,socialAccountIdURLVerb INTEGER,socialAccountIdField VARCHAR(75) null,socialAccountIdType INTEGER,socialAccountIdScript VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table OAuthLogin_OAuthConnection";
	public static final String ORDER_BY_JPQL = " ORDER BY oAuthConnection.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY OAuthLogin_OAuthConnection.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.oauthlogin.model.OAuthConnection"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.oauthlogin.model.OAuthConnection"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.oauthlogin.model.OAuthConnection"),
			true);
	public static long ENABLED_COLUMN_BITMASK = 1L;
	public static long CREATEDATE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.oauthlogin.model.OAuthConnection"));

	public OAuthConnectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _oAuthConnectionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOAuthConnectionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _oAuthConnectionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OAuthConnection.class;
	}

	@Override
	public String getModelClassName() {
		return OAuthConnection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("oAuthConnectionId", getOAuthConnectionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("enabled", getEnabled());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("iconId", getIconId());
		attributes.put("oAuthVersion", getOAuthVersion());
		attributes.put("key", getKey());
		attributes.put("secret", getSecret());
		attributes.put("scope", getScope());
		attributes.put("authorizeURL", getAuthorizeURL());
		attributes.put("accessTokenURL", getAccessTokenURL());
		attributes.put("accessTokenVerb", getAccessTokenVerb());
		attributes.put("accessTokenExtractorType", getAccessTokenExtractorType());
		attributes.put("requestTokenURL", getRequestTokenURL());
		attributes.put("requestTokenVerb", getRequestTokenVerb());
		attributes.put("signatureServiceType", getSignatureServiceType());
		attributes.put("redirectURL", getRedirectURL());
		attributes.put("socialAccountIdURL", getSocialAccountIdURL());
		attributes.put("socialAccountIdURLVerb", getSocialAccountIdURLVerb());
		attributes.put("socialAccountIdField", getSocialAccountIdField());
		attributes.put("socialAccountIdType", getSocialAccountIdType());
		attributes.put("socialAccountIdScript", getSocialAccountIdScript());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long oAuthConnectionId = (Long)attributes.get("oAuthConnectionId");

		if (oAuthConnectionId != null) {
			setOAuthConnectionId(oAuthConnectionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean enabled = (Boolean)attributes.get("enabled");

		if (enabled != null) {
			setEnabled(enabled);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long iconId = (Long)attributes.get("iconId");

		if (iconId != null) {
			setIconId(iconId);
		}

		Integer oAuthVersion = (Integer)attributes.get("oAuthVersion");

		if (oAuthVersion != null) {
			setOAuthVersion(oAuthVersion);
		}

		String key = (String)attributes.get("key");

		if (key != null) {
			setKey(key);
		}

		String secret = (String)attributes.get("secret");

		if (secret != null) {
			setSecret(secret);
		}

		String scope = (String)attributes.get("scope");

		if (scope != null) {
			setScope(scope);
		}

		String authorizeURL = (String)attributes.get("authorizeURL");

		if (authorizeURL != null) {
			setAuthorizeURL(authorizeURL);
		}

		String accessTokenURL = (String)attributes.get("accessTokenURL");

		if (accessTokenURL != null) {
			setAccessTokenURL(accessTokenURL);
		}

		Integer accessTokenVerb = (Integer)attributes.get("accessTokenVerb");

		if (accessTokenVerb != null) {
			setAccessTokenVerb(accessTokenVerb);
		}

		Integer accessTokenExtractorType = (Integer)attributes.get(
				"accessTokenExtractorType");

		if (accessTokenExtractorType != null) {
			setAccessTokenExtractorType(accessTokenExtractorType);
		}

		String requestTokenURL = (String)attributes.get("requestTokenURL");

		if (requestTokenURL != null) {
			setRequestTokenURL(requestTokenURL);
		}

		Integer requestTokenVerb = (Integer)attributes.get("requestTokenVerb");

		if (requestTokenVerb != null) {
			setRequestTokenVerb(requestTokenVerb);
		}

		Integer signatureServiceType = (Integer)attributes.get(
				"signatureServiceType");

		if (signatureServiceType != null) {
			setSignatureServiceType(signatureServiceType);
		}

		String redirectURL = (String)attributes.get("redirectURL");

		if (redirectURL != null) {
			setRedirectURL(redirectURL);
		}

		String socialAccountIdURL = (String)attributes.get("socialAccountIdURL");

		if (socialAccountIdURL != null) {
			setSocialAccountIdURL(socialAccountIdURL);
		}

		Integer socialAccountIdURLVerb = (Integer)attributes.get(
				"socialAccountIdURLVerb");

		if (socialAccountIdURLVerb != null) {
			setSocialAccountIdURLVerb(socialAccountIdURLVerb);
		}

		String socialAccountIdField = (String)attributes.get(
				"socialAccountIdField");

		if (socialAccountIdField != null) {
			setSocialAccountIdField(socialAccountIdField);
		}

		Integer socialAccountIdType = (Integer)attributes.get(
				"socialAccountIdType");

		if (socialAccountIdType != null) {
			setSocialAccountIdType(socialAccountIdType);
		}

		String socialAccountIdScript = (String)attributes.get(
				"socialAccountIdScript");

		if (socialAccountIdScript != null) {
			setSocialAccountIdScript(socialAccountIdScript);
		}
	}

	@Override
	public long getOAuthConnectionId() {
		return _oAuthConnectionId;
	}

	@Override
	public void setOAuthConnectionId(long oAuthConnectionId) {
		_oAuthConnectionId = oAuthConnectionId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean getEnabled() {
		return _enabled;
	}

	@Override
	public boolean isEnabled() {
		return _enabled;
	}

	@Override
	public void setEnabled(boolean enabled) {
		_columnBitmask |= ENABLED_COLUMN_BITMASK;

		if (!_setOriginalEnabled) {
			_setOriginalEnabled = true;

			_originalEnabled = _enabled;
		}

		_enabled = enabled;
	}

	public boolean getOriginalEnabled() {
		return _originalEnabled;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public long getIconId() {
		return _iconId;
	}

	@Override
	public void setIconId(long iconId) {
		_iconId = iconId;
	}

	@Override
	public int getOAuthVersion() {
		return _oAuthVersion;
	}

	@Override
	public void setOAuthVersion(int oAuthVersion) {
		_oAuthVersion = oAuthVersion;
	}

	@Override
	public String getKey() {
		if (_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		_key = key;
	}

	@Override
	public String getSecret() {
		if (_secret == null) {
			return StringPool.BLANK;
		}
		else {
			return _secret;
		}
	}

	@Override
	public void setSecret(String secret) {
		_secret = secret;
	}

	@Override
	public String getScope() {
		if (_scope == null) {
			return StringPool.BLANK;
		}
		else {
			return _scope;
		}
	}

	@Override
	public void setScope(String scope) {
		_scope = scope;
	}

	@Override
	public String getAuthorizeURL() {
		if (_authorizeURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _authorizeURL;
		}
	}

	@Override
	public void setAuthorizeURL(String authorizeURL) {
		_authorizeURL = authorizeURL;
	}

	@Override
	public String getAccessTokenURL() {
		if (_accessTokenURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _accessTokenURL;
		}
	}

	@Override
	public void setAccessTokenURL(String accessTokenURL) {
		_accessTokenURL = accessTokenURL;
	}

	@Override
	public int getAccessTokenVerb() {
		return _accessTokenVerb;
	}

	@Override
	public void setAccessTokenVerb(int accessTokenVerb) {
		_accessTokenVerb = accessTokenVerb;
	}

	@Override
	public int getAccessTokenExtractorType() {
		return _accessTokenExtractorType;
	}

	@Override
	public void setAccessTokenExtractorType(int accessTokenExtractorType) {
		_accessTokenExtractorType = accessTokenExtractorType;
	}

	@Override
	public String getRequestTokenURL() {
		if (_requestTokenURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestTokenURL;
		}
	}

	@Override
	public void setRequestTokenURL(String requestTokenURL) {
		_requestTokenURL = requestTokenURL;
	}

	@Override
	public int getRequestTokenVerb() {
		return _requestTokenVerb;
	}

	@Override
	public void setRequestTokenVerb(int requestTokenVerb) {
		_requestTokenVerb = requestTokenVerb;
	}

	@Override
	public int getSignatureServiceType() {
		return _signatureServiceType;
	}

	@Override
	public void setSignatureServiceType(int signatureServiceType) {
		_signatureServiceType = signatureServiceType;
	}

	@Override
	public String getRedirectURL() {
		if (_redirectURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _redirectURL;
		}
	}

	@Override
	public void setRedirectURL(String redirectURL) {
		_redirectURL = redirectURL;
	}

	@Override
	public String getSocialAccountIdURL() {
		if (_socialAccountIdURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _socialAccountIdURL;
		}
	}

	@Override
	public void setSocialAccountIdURL(String socialAccountIdURL) {
		_socialAccountIdURL = socialAccountIdURL;
	}

	@Override
	public int getSocialAccountIdURLVerb() {
		return _socialAccountIdURLVerb;
	}

	@Override
	public void setSocialAccountIdURLVerb(int socialAccountIdURLVerb) {
		_socialAccountIdURLVerb = socialAccountIdURLVerb;
	}

	@Override
	public String getSocialAccountIdField() {
		if (_socialAccountIdField == null) {
			return StringPool.BLANK;
		}
		else {
			return _socialAccountIdField;
		}
	}

	@Override
	public void setSocialAccountIdField(String socialAccountIdField) {
		_socialAccountIdField = socialAccountIdField;
	}

	@Override
	public int getSocialAccountIdType() {
		return _socialAccountIdType;
	}

	@Override
	public void setSocialAccountIdType(int socialAccountIdType) {
		_socialAccountIdType = socialAccountIdType;
	}

	@Override
	public String getSocialAccountIdScript() {
		if (_socialAccountIdScript == null) {
			return StringPool.BLANK;
		}
		else {
			return _socialAccountIdScript;
		}
	}

	@Override
	public void setSocialAccountIdScript(String socialAccountIdScript) {
		_socialAccountIdScript = socialAccountIdScript;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			OAuthConnection.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OAuthConnection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OAuthConnection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OAuthConnectionImpl oAuthConnectionImpl = new OAuthConnectionImpl();

		oAuthConnectionImpl.setOAuthConnectionId(getOAuthConnectionId());
		oAuthConnectionImpl.setCompanyId(getCompanyId());
		oAuthConnectionImpl.setUserId(getUserId());
		oAuthConnectionImpl.setCreateDate(getCreateDate());
		oAuthConnectionImpl.setModifiedDate(getModifiedDate());
		oAuthConnectionImpl.setEnabled(getEnabled());
		oAuthConnectionImpl.setName(getName());
		oAuthConnectionImpl.setDescription(getDescription());
		oAuthConnectionImpl.setIconId(getIconId());
		oAuthConnectionImpl.setOAuthVersion(getOAuthVersion());
		oAuthConnectionImpl.setKey(getKey());
		oAuthConnectionImpl.setSecret(getSecret());
		oAuthConnectionImpl.setScope(getScope());
		oAuthConnectionImpl.setAuthorizeURL(getAuthorizeURL());
		oAuthConnectionImpl.setAccessTokenURL(getAccessTokenURL());
		oAuthConnectionImpl.setAccessTokenVerb(getAccessTokenVerb());
		oAuthConnectionImpl.setAccessTokenExtractorType(getAccessTokenExtractorType());
		oAuthConnectionImpl.setRequestTokenURL(getRequestTokenURL());
		oAuthConnectionImpl.setRequestTokenVerb(getRequestTokenVerb());
		oAuthConnectionImpl.setSignatureServiceType(getSignatureServiceType());
		oAuthConnectionImpl.setRedirectURL(getRedirectURL());
		oAuthConnectionImpl.setSocialAccountIdURL(getSocialAccountIdURL());
		oAuthConnectionImpl.setSocialAccountIdURLVerb(getSocialAccountIdURLVerb());
		oAuthConnectionImpl.setSocialAccountIdField(getSocialAccountIdField());
		oAuthConnectionImpl.setSocialAccountIdType(getSocialAccountIdType());
		oAuthConnectionImpl.setSocialAccountIdScript(getSocialAccountIdScript());

		oAuthConnectionImpl.resetOriginalValues();

		return oAuthConnectionImpl;
	}

	@Override
	public int compareTo(OAuthConnection oAuthConnection) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				oAuthConnection.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OAuthConnection)) {
			return false;
		}

		OAuthConnection oAuthConnection = (OAuthConnection)obj;

		long primaryKey = oAuthConnection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		OAuthConnectionModelImpl oAuthConnectionModelImpl = this;

		oAuthConnectionModelImpl._originalEnabled = oAuthConnectionModelImpl._enabled;

		oAuthConnectionModelImpl._setOriginalEnabled = false;

		oAuthConnectionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OAuthConnection> toCacheModel() {
		OAuthConnectionCacheModel oAuthConnectionCacheModel = new OAuthConnectionCacheModel();

		oAuthConnectionCacheModel.oAuthConnectionId = getOAuthConnectionId();

		oAuthConnectionCacheModel.companyId = getCompanyId();

		oAuthConnectionCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			oAuthConnectionCacheModel.createDate = createDate.getTime();
		}
		else {
			oAuthConnectionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			oAuthConnectionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			oAuthConnectionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		oAuthConnectionCacheModel.enabled = getEnabled();

		oAuthConnectionCacheModel.name = getName();

		String name = oAuthConnectionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			oAuthConnectionCacheModel.name = null;
		}

		oAuthConnectionCacheModel.description = getDescription();

		String description = oAuthConnectionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			oAuthConnectionCacheModel.description = null;
		}

		oAuthConnectionCacheModel.iconId = getIconId();

		oAuthConnectionCacheModel.oAuthVersion = getOAuthVersion();

		oAuthConnectionCacheModel.key = getKey();

		String key = oAuthConnectionCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			oAuthConnectionCacheModel.key = null;
		}

		oAuthConnectionCacheModel.secret = getSecret();

		String secret = oAuthConnectionCacheModel.secret;

		if ((secret != null) && (secret.length() == 0)) {
			oAuthConnectionCacheModel.secret = null;
		}

		oAuthConnectionCacheModel.scope = getScope();

		String scope = oAuthConnectionCacheModel.scope;

		if ((scope != null) && (scope.length() == 0)) {
			oAuthConnectionCacheModel.scope = null;
		}

		oAuthConnectionCacheModel.authorizeURL = getAuthorizeURL();

		String authorizeURL = oAuthConnectionCacheModel.authorizeURL;

		if ((authorizeURL != null) && (authorizeURL.length() == 0)) {
			oAuthConnectionCacheModel.authorizeURL = null;
		}

		oAuthConnectionCacheModel.accessTokenURL = getAccessTokenURL();

		String accessTokenURL = oAuthConnectionCacheModel.accessTokenURL;

		if ((accessTokenURL != null) && (accessTokenURL.length() == 0)) {
			oAuthConnectionCacheModel.accessTokenURL = null;
		}

		oAuthConnectionCacheModel.accessTokenVerb = getAccessTokenVerb();

		oAuthConnectionCacheModel.accessTokenExtractorType = getAccessTokenExtractorType();

		oAuthConnectionCacheModel.requestTokenURL = getRequestTokenURL();

		String requestTokenURL = oAuthConnectionCacheModel.requestTokenURL;

		if ((requestTokenURL != null) && (requestTokenURL.length() == 0)) {
			oAuthConnectionCacheModel.requestTokenURL = null;
		}

		oAuthConnectionCacheModel.requestTokenVerb = getRequestTokenVerb();

		oAuthConnectionCacheModel.signatureServiceType = getSignatureServiceType();

		oAuthConnectionCacheModel.redirectURL = getRedirectURL();

		String redirectURL = oAuthConnectionCacheModel.redirectURL;

		if ((redirectURL != null) && (redirectURL.length() == 0)) {
			oAuthConnectionCacheModel.redirectURL = null;
		}

		oAuthConnectionCacheModel.socialAccountIdURL = getSocialAccountIdURL();

		String socialAccountIdURL = oAuthConnectionCacheModel.socialAccountIdURL;

		if ((socialAccountIdURL != null) && (socialAccountIdURL.length() == 0)) {
			oAuthConnectionCacheModel.socialAccountIdURL = null;
		}

		oAuthConnectionCacheModel.socialAccountIdURLVerb = getSocialAccountIdURLVerb();

		oAuthConnectionCacheModel.socialAccountIdField = getSocialAccountIdField();

		String socialAccountIdField = oAuthConnectionCacheModel.socialAccountIdField;

		if ((socialAccountIdField != null) &&
				(socialAccountIdField.length() == 0)) {
			oAuthConnectionCacheModel.socialAccountIdField = null;
		}

		oAuthConnectionCacheModel.socialAccountIdType = getSocialAccountIdType();

		oAuthConnectionCacheModel.socialAccountIdScript = getSocialAccountIdScript();

		String socialAccountIdScript = oAuthConnectionCacheModel.socialAccountIdScript;

		if ((socialAccountIdScript != null) &&
				(socialAccountIdScript.length() == 0)) {
			oAuthConnectionCacheModel.socialAccountIdScript = null;
		}

		return oAuthConnectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(53);

		sb.append("{oAuthConnectionId=");
		sb.append(getOAuthConnectionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", enabled=");
		sb.append(getEnabled());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", iconId=");
		sb.append(getIconId());
		sb.append(", oAuthVersion=");
		sb.append(getOAuthVersion());
		sb.append(", key=");
		sb.append(getKey());
		sb.append(", secret=");
		sb.append(getSecret());
		sb.append(", scope=");
		sb.append(getScope());
		sb.append(", authorizeURL=");
		sb.append(getAuthorizeURL());
		sb.append(", accessTokenURL=");
		sb.append(getAccessTokenURL());
		sb.append(", accessTokenVerb=");
		sb.append(getAccessTokenVerb());
		sb.append(", accessTokenExtractorType=");
		sb.append(getAccessTokenExtractorType());
		sb.append(", requestTokenURL=");
		sb.append(getRequestTokenURL());
		sb.append(", requestTokenVerb=");
		sb.append(getRequestTokenVerb());
		sb.append(", signatureServiceType=");
		sb.append(getSignatureServiceType());
		sb.append(", redirectURL=");
		sb.append(getRedirectURL());
		sb.append(", socialAccountIdURL=");
		sb.append(getSocialAccountIdURL());
		sb.append(", socialAccountIdURLVerb=");
		sb.append(getSocialAccountIdURLVerb());
		sb.append(", socialAccountIdField=");
		sb.append(getSocialAccountIdField());
		sb.append(", socialAccountIdType=");
		sb.append(getSocialAccountIdType());
		sb.append(", socialAccountIdScript=");
		sb.append(getSocialAccountIdScript());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(82);

		sb.append("<model><model-name>");
		sb.append("com.liferay.oauthlogin.model.OAuthConnection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>oAuthConnectionId</column-name><column-value><![CDATA[");
		sb.append(getOAuthConnectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enabled</column-name><column-value><![CDATA[");
		sb.append(getEnabled());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iconId</column-name><column-value><![CDATA[");
		sb.append(getIconId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oAuthVersion</column-name><column-value><![CDATA[");
		sb.append(getOAuthVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key</column-name><column-value><![CDATA[");
		sb.append(getKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secret</column-name><column-value><![CDATA[");
		sb.append(getSecret());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scope</column-name><column-value><![CDATA[");
		sb.append(getScope());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authorizeURL</column-name><column-value><![CDATA[");
		sb.append(getAuthorizeURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessTokenURL</column-name><column-value><![CDATA[");
		sb.append(getAccessTokenURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessTokenVerb</column-name><column-value><![CDATA[");
		sb.append(getAccessTokenVerb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessTokenExtractorType</column-name><column-value><![CDATA[");
		sb.append(getAccessTokenExtractorType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestTokenURL</column-name><column-value><![CDATA[");
		sb.append(getRequestTokenURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestTokenVerb</column-name><column-value><![CDATA[");
		sb.append(getRequestTokenVerb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signatureServiceType</column-name><column-value><![CDATA[");
		sb.append(getSignatureServiceType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>redirectURL</column-name><column-value><![CDATA[");
		sb.append(getRedirectURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>socialAccountIdURL</column-name><column-value><![CDATA[");
		sb.append(getSocialAccountIdURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>socialAccountIdURLVerb</column-name><column-value><![CDATA[");
		sb.append(getSocialAccountIdURLVerb());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>socialAccountIdField</column-name><column-value><![CDATA[");
		sb.append(getSocialAccountIdField());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>socialAccountIdType</column-name><column-value><![CDATA[");
		sb.append(getSocialAccountIdType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>socialAccountIdScript</column-name><column-value><![CDATA[");
		sb.append(getSocialAccountIdScript());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OAuthConnection.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			OAuthConnection.class
		};
	private long _oAuthConnectionId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _enabled;
	private boolean _originalEnabled;
	private boolean _setOriginalEnabled;
	private String _name;
	private String _description;
	private long _iconId;
	private int _oAuthVersion;
	private String _key;
	private String _secret;
	private String _scope;
	private String _authorizeURL;
	private String _accessTokenURL;
	private int _accessTokenVerb;
	private int _accessTokenExtractorType;
	private String _requestTokenURL;
	private int _requestTokenVerb;
	private int _signatureServiceType;
	private String _redirectURL;
	private String _socialAccountIdURL;
	private int _socialAccountIdURLVerb;
	private String _socialAccountIdField;
	private int _socialAccountIdType;
	private String _socialAccountIdScript;
	private long _columnBitmask;
	private OAuthConnection _escapedModel;
}